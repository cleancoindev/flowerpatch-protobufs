/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var protobuf_servicecommon_pb = require('../protobuf/servicecommon_pb.js');
var protobuf_gametile_pb = require('../protobuf/gametile_pb.js');
var protobuf_gamestate_pb = require('../protobuf/gamestate_pb.js');
var protobuf_inventory_pb = require('../protobuf/inventory_pb.js');
goog.exportSymbol('proto.protobuf.GameStateRequest', null, global);
goog.exportSymbol('proto.protobuf.GameStats', null, global);
goog.exportSymbol('proto.protobuf.GameTileRequest', null, global);
goog.exportSymbol('proto.protobuf.InteractionReply', null, global);
goog.exportSymbol('proto.protobuf.InteractionRequest', null, global);
goog.exportSymbol('proto.protobuf.PlantedFlowers', null, global);
goog.exportSymbol('proto.protobuf.PlantedFlowers.Planted', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.PlantedFlowers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobuf.PlantedFlowers.repeatedFields_, null);
};
goog.inherits(proto.protobuf.PlantedFlowers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.PlantedFlowers.displayName = 'proto.protobuf.PlantedFlowers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobuf.PlantedFlowers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.PlantedFlowers.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.PlantedFlowers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.PlantedFlowers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.PlantedFlowers.toObject = function(includeInstance, msg) {
  var f, obj = {
    plantedList: jspb.Message.toObjectList(msg.getPlantedList(),
    proto.protobuf.PlantedFlowers.Planted.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.PlantedFlowers}
 */
proto.protobuf.PlantedFlowers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.PlantedFlowers;
  return proto.protobuf.PlantedFlowers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.PlantedFlowers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.PlantedFlowers}
 */
proto.protobuf.PlantedFlowers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobuf.PlantedFlowers.Planted;
      reader.readMessage(value,proto.protobuf.PlantedFlowers.Planted.deserializeBinaryFromReader);
      msg.addPlanted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.PlantedFlowers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.PlantedFlowers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.PlantedFlowers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.PlantedFlowers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlantedList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobuf.PlantedFlowers.Planted.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.PlantedFlowers.Planted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.PlantedFlowers.Planted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.PlantedFlowers.Planted.displayName = 'proto.protobuf.PlantedFlowers.Planted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.PlantedFlowers.Planted.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.PlantedFlowers.Planted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.PlantedFlowers.Planted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.PlantedFlowers.Planted.toObject = function(includeInstance, msg) {
  var f, obj = {
    iD: jspb.Message.getFieldWithDefault(msg, 4, 0),
    locationX: jspb.Message.getFieldWithDefault(msg, 5, 0),
    locationY: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.PlantedFlowers.Planted}
 */
proto.protobuf.PlantedFlowers.Planted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.PlantedFlowers.Planted;
  return proto.protobuf.PlantedFlowers.Planted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.PlantedFlowers.Planted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.PlantedFlowers.Planted}
 */
proto.protobuf.PlantedFlowers.Planted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setID(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLocationX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLocationY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.PlantedFlowers.Planted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.PlantedFlowers.Planted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.PlantedFlowers.Planted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.PlantedFlowers.Planted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getID();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getLocationX();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getLocationY();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 i_d = 4;
 * @return {number}
 */
proto.protobuf.PlantedFlowers.Planted.prototype.getID = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protobuf.PlantedFlowers.Planted.prototype.setID = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 location_x = 5;
 * @return {number}
 */
proto.protobuf.PlantedFlowers.Planted.prototype.getLocationX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protobuf.PlantedFlowers.Planted.prototype.setLocationX = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 location_y = 6;
 * @return {number}
 */
proto.protobuf.PlantedFlowers.Planted.prototype.getLocationY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protobuf.PlantedFlowers.Planted.prototype.setLocationY = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Planted planted = 1;
 * @return {!Array<!proto.protobuf.PlantedFlowers.Planted>}
 */
proto.protobuf.PlantedFlowers.prototype.getPlantedList = function() {
  return /** @type{!Array<!proto.protobuf.PlantedFlowers.Planted>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobuf.PlantedFlowers.Planted, 1));
};


/** @param {!Array<!proto.protobuf.PlantedFlowers.Planted>} value */
proto.protobuf.PlantedFlowers.prototype.setPlantedList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobuf.PlantedFlowers.Planted=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobuf.PlantedFlowers.Planted}
 */
proto.protobuf.PlantedFlowers.prototype.addPlanted = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobuf.PlantedFlowers.Planted, opt_index);
};


proto.protobuf.PlantedFlowers.prototype.clearPlantedList = function() {
  this.setPlantedList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.InteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.InteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.InteractionRequest.displayName = 'proto.protobuf.InteractionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.InteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.InteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.InteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.InteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceAccount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    x: jspb.Message.getFieldWithDefault(msg, 2, 0),
    y: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: (f = msg.getData()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.InteractionRequest}
 */
proto.protobuf.InteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.InteractionRequest;
  return proto.protobuf.InteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.InteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.InteractionRequest}
 */
proto.protobuf.InteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 4:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.InteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.InteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.InteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.InteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_account = 1;
 * @return {string}
 */
proto.protobuf.InteractionRequest.prototype.getSourceAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobuf.InteractionRequest.prototype.setSourceAccount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.protobuf.InteractionRequest.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.InteractionRequest.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.protobuf.InteractionRequest.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protobuf.InteractionRequest.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Struct data = 4;
 * @return {?proto.google.protobuf.Struct}
 */
proto.protobuf.InteractionRequest.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 4));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.protobuf.InteractionRequest.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.protobuf.InteractionRequest.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.InteractionRequest.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.InteractionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.InteractionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.InteractionReply.displayName = 'proto.protobuf.InteractionReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.InteractionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.InteractionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.InteractionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.InteractionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    uniqueID: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roll: jspb.Message.getFieldWithDefault(msg, 2, 0),
    resultType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    text: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.InteractionReply}
 */
proto.protobuf.InteractionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.InteractionReply;
  return proto.protobuf.InteractionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.InteractionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.InteractionReply}
 */
proto.protobuf.InteractionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqueID(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoll(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.InteractionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.InteractionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.InteractionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.InteractionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUniqueID();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoll();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getResultType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string unique_i_d = 1;
 * @return {string}
 */
proto.protobuf.InteractionReply.prototype.getUniqueID = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobuf.InteractionReply.prototype.setUniqueID = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 roll = 2;
 * @return {number}
 */
proto.protobuf.InteractionReply.prototype.getRoll = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.InteractionReply.prototype.setRoll = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string result_type = 3;
 * @return {string}
 */
proto.protobuf.InteractionReply.prototype.getResultType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protobuf.InteractionReply.prototype.setResultType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string text = 4;
 * @return {string}
 */
proto.protobuf.InteractionReply.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protobuf.InteractionReply.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.GameTileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.GameTileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.GameTileRequest.displayName = 'proto.protobuf.GameTileRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.GameTileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.GameTileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.GameTileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.GameTileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceAccount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameTile: (f = msg.getGameTile()) && protobuf_gametile_pb.GameTile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.GameTileRequest}
 */
proto.protobuf.GameTileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.GameTileRequest;
  return proto.protobuf.GameTileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.GameTileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.GameTileRequest}
 */
proto.protobuf.GameTileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAccount(value);
      break;
    case 2:
      var value = new protobuf_gametile_pb.GameTile;
      reader.readMessage(value,protobuf_gametile_pb.GameTile.deserializeBinaryFromReader);
      msg.setGameTile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.GameTileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.GameTileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.GameTileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.GameTileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameTile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      protobuf_gametile_pb.GameTile.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_account = 1;
 * @return {string}
 */
proto.protobuf.GameTileRequest.prototype.getSourceAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobuf.GameTileRequest.prototype.setSourceAccount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GameTile game_tile = 2;
 * @return {?proto.protobuf.GameTile}
 */
proto.protobuf.GameTileRequest.prototype.getGameTile = function() {
  return /** @type{?proto.protobuf.GameTile} */ (
    jspb.Message.getWrapperField(this, protobuf_gametile_pb.GameTile, 2));
};


/** @param {?proto.protobuf.GameTile|undefined} value */
proto.protobuf.GameTileRequest.prototype.setGameTile = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.protobuf.GameTileRequest.prototype.clearGameTile = function() {
  this.setGameTile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.protobuf.GameTileRequest.prototype.hasGameTile = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.GameStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.GameStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.GameStateRequest.displayName = 'proto.protobuf.GameStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.GameStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.GameStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.GameStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.GameStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceAccount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.GameStateRequest}
 */
proto.protobuf.GameStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.GameStateRequest;
  return proto.protobuf.GameStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.GameStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.GameStateRequest}
 */
proto.protobuf.GameStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.GameStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.GameStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.GameStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.GameStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string source_account = 1;
 * @return {string}
 */
proto.protobuf.GameStateRequest.prototype.getSourceAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protobuf.GameStateRequest.prototype.setSourceAccount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 last_timestamp = 2;
 * @return {number}
 */
proto.protobuf.GameStateRequest.prototype.getLastTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.GameStateRequest.prototype.setLastTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobuf.GameStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobuf.GameStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.protobuf.GameStats.displayName = 'proto.protobuf.GameStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobuf.GameStats.prototype.toObject = function(opt_includeInstance) {
  return proto.protobuf.GameStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobuf.GameStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.GameStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalFlowersPlanted: jspb.Message.getFieldWithDefault(msg, 1, 0),
    flowersPlantedByAccount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobuf.GameStats}
 */
proto.protobuf.GameStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobuf.GameStats;
  return proto.protobuf.GameStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobuf.GameStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobuf.GameStats}
 */
proto.protobuf.GameStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalFlowersPlanted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFlowersPlantedByAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobuf.GameStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobuf.GameStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobuf.GameStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobuf.GameStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalFlowersPlanted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFlowersPlantedByAccount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 total_flowers_planted = 1;
 * @return {number}
 */
proto.protobuf.GameStats.prototype.getTotalFlowersPlanted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobuf.GameStats.prototype.setTotalFlowersPlanted = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 flowers_planted_by_account = 2;
 * @return {number}
 */
proto.protobuf.GameStats.prototype.getFlowersPlantedByAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protobuf.GameStats.prototype.setFlowersPlantedByAccount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.protobuf);
