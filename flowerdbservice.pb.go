// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/flowerdbservice.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FlowerQuery_RarityTier int32

const (
	FlowerQuery_ANY_RARITY FlowerQuery_RarityTier = 0
	FlowerQuery_COMMON     FlowerQuery_RarityTier = 1
	FlowerQuery_UNUSUAL    FlowerQuery_RarityTier = 2
	FlowerQuery_RARE       FlowerQuery_RarityTier = 3
	FlowerQuery_EPIC       FlowerQuery_RarityTier = 4
	FlowerQuery_LEGENDARY  FlowerQuery_RarityTier = 5
)

var FlowerQuery_RarityTier_name = map[int32]string{
	0: "ANY_RARITY",
	1: "COMMON",
	2: "UNUSUAL",
	3: "RARE",
	4: "EPIC",
	5: "LEGENDARY",
}

var FlowerQuery_RarityTier_value = map[string]int32{
	"ANY_RARITY": 0,
	"COMMON":     1,
	"UNUSUAL":    2,
	"RARE":       3,
	"EPIC":       4,
	"LEGENDARY":  5,
}

func (x FlowerQuery_RarityTier) String() string {
	return proto.EnumName(FlowerQuery_RarityTier_name, int32(x))
}

func (FlowerQuery_RarityTier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 0}
}

type FlowerQuery_LandAffinity int32

const (
	FlowerQuery_ANY_LAND FlowerQuery_LandAffinity = 0
	FlowerQuery_SOIL     FlowerQuery_LandAffinity = 1
	FlowerQuery_STONE    FlowerQuery_LandAffinity = 2
	FlowerQuery_SAND     FlowerQuery_LandAffinity = 3
	FlowerQuery_LAVA     FlowerQuery_LandAffinity = 4
	FlowerQuery_WATER    FlowerQuery_LandAffinity = 5
	FlowerQuery_ICE      FlowerQuery_LandAffinity = 6
)

var FlowerQuery_LandAffinity_name = map[int32]string{
	0: "ANY_LAND",
	1: "SOIL",
	2: "STONE",
	3: "SAND",
	4: "LAVA",
	5: "WATER",
	6: "ICE",
}

var FlowerQuery_LandAffinity_value = map[string]int32{
	"ANY_LAND": 0,
	"SOIL":     1,
	"STONE":    2,
	"SAND":     3,
	"LAVA":     4,
	"WATER":    5,
	"ICE":      6,
}

func (x FlowerQuery_LandAffinity) String() string {
	return proto.EnumName(FlowerQuery_LandAffinity_name, int32(x))
}

func (FlowerQuery_LandAffinity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 1}
}

type FlowerQuery_Planted int32

const (
	FlowerQuery_ANY_PLANTED FlowerQuery_Planted = 0
	FlowerQuery_PLANTED     FlowerQuery_Planted = 1
	FlowerQuery_NOT_PLANTED FlowerQuery_Planted = 2
)

var FlowerQuery_Planted_name = map[int32]string{
	0: "ANY_PLANTED",
	1: "PLANTED",
	2: "NOT_PLANTED",
}

var FlowerQuery_Planted_value = map[string]int32{
	"ANY_PLANTED": 0,
	"PLANTED":     1,
	"NOT_PLANTED": 2,
}

func (x FlowerQuery_Planted) String() string {
	return proto.EnumName(FlowerQuery_Planted_name, int32(x))
}

func (FlowerQuery_Planted) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 2}
}

type FlowerQuery_SortBy int32

const (
	FlowerQuery_AGE          FlowerQuery_SortBy = 0
	FlowerQuery_RARITY       FlowerQuery_SortBy = 1
	FlowerQuery_GROWTH_SPEED FlowerQuery_SortBy = 2
	FlowerQuery_HARVEST_SIZE FlowerQuery_SortBy = 3
)

var FlowerQuery_SortBy_name = map[int32]string{
	0: "AGE",
	1: "RARITY",
	2: "GROWTH_SPEED",
	3: "HARVEST_SIZE",
}

var FlowerQuery_SortBy_value = map[string]int32{
	"AGE":          0,
	"RARITY":       1,
	"GROWTH_SPEED": 2,
	"HARVEST_SIZE": 3,
}

func (x FlowerQuery_SortBy) String() string {
	return proto.EnumName(FlowerQuery_SortBy_name, int32(x))
}

func (FlowerQuery_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 3}
}

type FlowerQuery_SortOrder int32

const (
	FlowerQuery_DESCENDING FlowerQuery_SortOrder = 0
	FlowerQuery_ASCENDING  FlowerQuery_SortOrder = 1
)

var FlowerQuery_SortOrder_name = map[int32]string{
	0: "DESCENDING",
	1: "ASCENDING",
}

var FlowerQuery_SortOrder_value = map[string]int32{
	"DESCENDING": 0,
	"ASCENDING":  1,
}

func (x FlowerQuery_SortOrder) String() string {
	return proto.EnumName(FlowerQuery_SortOrder_name, int32(x))
}

func (FlowerQuery_SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 4}
}

type AccountStats struct {
	RarityBreakdown      *RarityLeaderboard `protobuf:"bytes,1,opt,name=rarity_breakdown,json=rarityBreakdown,proto3" json:"rarity_breakdown,omitempty"`
	NumBreeds            uint32             `protobuf:"varint,2,opt,name=num_breeds,json=numBreeds,proto3" json:"num_breeds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-" datastore:"-"`
	XXX_unrecognized     []byte             `json:"-" datastore:"-"`
	XXX_sizecache        int32              `json:"-" datastore:"-"`
}

func (m *AccountStats) Reset()         { *m = AccountStats{} }
func (m *AccountStats) String() string { return proto.CompactTextString(m) }
func (*AccountStats) ProtoMessage()    {}
func (*AccountStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{0}
}

func (m *AccountStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountStats.Unmarshal(m, b)
}
func (m *AccountStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountStats.Marshal(b, m, deterministic)
}
func (m *AccountStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountStats.Merge(m, src)
}
func (m *AccountStats) XXX_Size() int {
	return xxx_messageInfo_AccountStats.Size(m)
}
func (m *AccountStats) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountStats.DiscardUnknown(m)
}

var xxx_messageInfo_AccountStats proto.InternalMessageInfo

func (m *AccountStats) GetRarityBreakdown() *RarityLeaderboard {
	if m != nil {
		return m.RarityBreakdown
	}
	return nil
}

func (m *AccountStats) GetNumBreeds() uint32 {
	if m != nil {
		return m.NumBreeds
	}
	return 0
}

type FlowerQuery struct {
	Account              string               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Filters              *FlowerQuery_Filters `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
	Sorting              *FlowerQuery_Sorting `protobuf:"bytes,3,opt,name=sorting,proto3" json:"sorting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-" datastore:"-"`
	XXX_unrecognized     []byte               `json:"-" datastore:"-"`
	XXX_sizecache        int32                `json:"-" datastore:"-"`
}

func (m *FlowerQuery) Reset()         { *m = FlowerQuery{} }
func (m *FlowerQuery) String() string { return proto.CompactTextString(m) }
func (*FlowerQuery) ProtoMessage()    {}
func (*FlowerQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1}
}

func (m *FlowerQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowerQuery.Unmarshal(m, b)
}
func (m *FlowerQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowerQuery.Marshal(b, m, deterministic)
}
func (m *FlowerQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowerQuery.Merge(m, src)
}
func (m *FlowerQuery) XXX_Size() int {
	return xxx_messageInfo_FlowerQuery.Size(m)
}
func (m *FlowerQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowerQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FlowerQuery proto.InternalMessageInfo

func (m *FlowerQuery) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *FlowerQuery) GetFilters() *FlowerQuery_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *FlowerQuery) GetSorting() *FlowerQuery_Sorting {
	if m != nil {
		return m.Sorting
	}
	return nil
}

type FlowerQuery_Filters struct {
	RarityTier           FlowerQuery_RarityTier   `protobuf:"varint,100,opt,name=rarity_tier,json=rarityTier,proto3,enum=protobuf.FlowerQuery_RarityTier" json:"rarity_tier,omitempty"`
	LandAffinity         FlowerQuery_LandAffinity `protobuf:"varint,101,opt,name=land_affinity,json=landAffinity,proto3,enum=protobuf.FlowerQuery_LandAffinity" json:"land_affinity,omitempty"`
	Planted              FlowerQuery_Planted      `protobuf:"varint,102,opt,name=planted,proto3,enum=protobuf.FlowerQuery_Planted" json:"planted,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-" datastore:"-"`
	XXX_unrecognized     []byte                   `json:"-" datastore:"-"`
	XXX_sizecache        int32                    `json:"-" datastore:"-"`
}

func (m *FlowerQuery_Filters) Reset()         { *m = FlowerQuery_Filters{} }
func (m *FlowerQuery_Filters) String() string { return proto.CompactTextString(m) }
func (*FlowerQuery_Filters) ProtoMessage()    {}
func (*FlowerQuery_Filters) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 0}
}

func (m *FlowerQuery_Filters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowerQuery_Filters.Unmarshal(m, b)
}
func (m *FlowerQuery_Filters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowerQuery_Filters.Marshal(b, m, deterministic)
}
func (m *FlowerQuery_Filters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowerQuery_Filters.Merge(m, src)
}
func (m *FlowerQuery_Filters) XXX_Size() int {
	return xxx_messageInfo_FlowerQuery_Filters.Size(m)
}
func (m *FlowerQuery_Filters) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowerQuery_Filters.DiscardUnknown(m)
}

var xxx_messageInfo_FlowerQuery_Filters proto.InternalMessageInfo

func (m *FlowerQuery_Filters) GetRarityTier() FlowerQuery_RarityTier {
	if m != nil {
		return m.RarityTier
	}
	return FlowerQuery_ANY_RARITY
}

func (m *FlowerQuery_Filters) GetLandAffinity() FlowerQuery_LandAffinity {
	if m != nil {
		return m.LandAffinity
	}
	return FlowerQuery_ANY_LAND
}

func (m *FlowerQuery_Filters) GetPlanted() FlowerQuery_Planted {
	if m != nil {
		return m.Planted
	}
	return FlowerQuery_ANY_PLANTED
}

type FlowerQuery_Sorting struct {
	SortBy               FlowerQuery_SortBy    `protobuf:"varint,200,opt,name=sort_by,json=sortBy,proto3,enum=protobuf.FlowerQuery_SortBy" json:"sort_by,omitempty"`
	SortOrder            FlowerQuery_SortOrder `protobuf:"varint,201,opt,name=sort_order,json=sortOrder,proto3,enum=protobuf.FlowerQuery_SortOrder" json:"sort_order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" datastore:"-"`
	XXX_unrecognized     []byte                `json:"-" datastore:"-"`
	XXX_sizecache        int32                 `json:"-" datastore:"-"`
}

func (m *FlowerQuery_Sorting) Reset()         { *m = FlowerQuery_Sorting{} }
func (m *FlowerQuery_Sorting) String() string { return proto.CompactTextString(m) }
func (*FlowerQuery_Sorting) ProtoMessage()    {}
func (*FlowerQuery_Sorting) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb7bf1d06ea50a44, []int{1, 1}
}

func (m *FlowerQuery_Sorting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowerQuery_Sorting.Unmarshal(m, b)
}
func (m *FlowerQuery_Sorting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowerQuery_Sorting.Marshal(b, m, deterministic)
}
func (m *FlowerQuery_Sorting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowerQuery_Sorting.Merge(m, src)
}
func (m *FlowerQuery_Sorting) XXX_Size() int {
	return xxx_messageInfo_FlowerQuery_Sorting.Size(m)
}
func (m *FlowerQuery_Sorting) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowerQuery_Sorting.DiscardUnknown(m)
}

var xxx_messageInfo_FlowerQuery_Sorting proto.InternalMessageInfo

func (m *FlowerQuery_Sorting) GetSortBy() FlowerQuery_SortBy {
	if m != nil {
		return m.SortBy
	}
	return FlowerQuery_AGE
}

func (m *FlowerQuery_Sorting) GetSortOrder() FlowerQuery_SortOrder {
	if m != nil {
		return m.SortOrder
	}
	return FlowerQuery_DESCENDING
}

func init() {
	proto.RegisterEnum("protobuf.FlowerQuery_RarityTier", FlowerQuery_RarityTier_name, FlowerQuery_RarityTier_value)
	proto.RegisterEnum("protobuf.FlowerQuery_LandAffinity", FlowerQuery_LandAffinity_name, FlowerQuery_LandAffinity_value)
	proto.RegisterEnum("protobuf.FlowerQuery_Planted", FlowerQuery_Planted_name, FlowerQuery_Planted_value)
	proto.RegisterEnum("protobuf.FlowerQuery_SortBy", FlowerQuery_SortBy_name, FlowerQuery_SortBy_value)
	proto.RegisterEnum("protobuf.FlowerQuery_SortOrder", FlowerQuery_SortOrder_name, FlowerQuery_SortOrder_value)
	proto.RegisterType((*AccountStats)(nil), "protobuf.AccountStats")
	proto.RegisterType((*FlowerQuery)(nil), "protobuf.FlowerQuery")
	proto.RegisterType((*FlowerQuery_Filters)(nil), "protobuf.FlowerQuery.Filters")
	proto.RegisterType((*FlowerQuery_Sorting)(nil), "protobuf.FlowerQuery.Sorting")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlowerDBClient is the client API for FlowerDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlowerDBClient interface {
	GetFlower(ctx context.Context, in *SingleInt64, opts ...grpc.CallOption) (*Flower, error)
	GetAccountStats(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*AccountStats, error)
	FindFlower(ctx context.Context, in *FlowerQuery, opts ...grpc.CallOption) (*RepeatedInt64, error)
}

type flowerDBClient struct {
	cc *grpc.ClientConn
}

func NewFlowerDBClient(cc *grpc.ClientConn) FlowerDBClient {
	return &flowerDBClient{cc}
}

func (c *flowerDBClient) GetFlower(ctx context.Context, in *SingleInt64, opts ...grpc.CallOption) (*Flower, error) {
	out := new(Flower)
	err := c.cc.Invoke(ctx, "/protobuf.FlowerDB/GetFlower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowerDBClient) GetAccountStats(ctx context.Context, in *SingleString, opts ...grpc.CallOption) (*AccountStats, error) {
	out := new(AccountStats)
	err := c.cc.Invoke(ctx, "/protobuf.FlowerDB/GetAccountStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flowerDBClient) FindFlower(ctx context.Context, in *FlowerQuery, opts ...grpc.CallOption) (*RepeatedInt64, error) {
	out := new(RepeatedInt64)
	err := c.cc.Invoke(ctx, "/protobuf.FlowerDB/FindFlower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowerDBServer is the server API for FlowerDB service.
type FlowerDBServer interface {
	GetFlower(context.Context, *SingleInt64) (*Flower, error)
	GetAccountStats(context.Context, *SingleString) (*AccountStats, error)
	FindFlower(context.Context, *FlowerQuery) (*RepeatedInt64, error)
}

func RegisterFlowerDBServer(s *grpc.Server, srv FlowerDBServer) {
	s.RegisterService(&_FlowerDB_serviceDesc, srv)
}

func _FlowerDB_GetFlower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowerDBServer).GetFlower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FlowerDB/GetFlower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowerDBServer).GetFlower(ctx, req.(*SingleInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowerDB_GetAccountStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowerDBServer).GetAccountStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FlowerDB/GetAccountStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowerDBServer).GetAccountStats(ctx, req.(*SingleString))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlowerDB_FindFlower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowerQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowerDBServer).FindFlower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.FlowerDB/FindFlower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowerDBServer).FindFlower(ctx, req.(*FlowerQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlowerDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.FlowerDB",
	HandlerType: (*FlowerDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlower",
			Handler:    _FlowerDB_GetFlower_Handler,
		},
		{
			MethodName: "GetAccountStats",
			Handler:    _FlowerDB_GetAccountStats_Handler,
		},
		{
			MethodName: "FindFlower",
			Handler:    _FlowerDB_FindFlower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/flowerdbservice.proto",
}

func init() { proto.RegisterFile("protobuf/flowerdbservice.proto", fileDescriptor_eb7bf1d06ea50a44) }

var fileDescriptor_eb7bf1d06ea50a44 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xc1, 0x6f, 0xda, 0x30,
	0x14, 0xc6, 0x49, 0x69, 0x09, 0x3c, 0x68, 0x6b, 0x59, 0xea, 0x16, 0xb1, 0x76, 0x43, 0x39, 0x55,
	0x3b, 0x30, 0x89, 0x4d, 0xdd, 0x4e, 0x9b, 0x0c, 0x04, 0x8a, 0x94, 0x06, 0xe6, 0xa4, 0xed, 0xd8,
	0x05, 0x05, 0x62, 0xaa, 0x68, 0x90, 0x54, 0xc6, 0xac, 0xe2, 0xba, 0x7f, 0x6e, 0xdb, 0x61, 0xfb,
	0x9b, 0x26, 0xc7, 0x09, 0xb0, 0xae, 0xdd, 0x09, 0x3f, 0xbf, 0xef, 0xfb, 0xc5, 0xef, 0x33, 0x09,
	0x3c, 0xbf, 0xe5, 0xb1, 0x88, 0xc7, 0xcb, 0xe9, 0xab, 0xe9, 0x2c, 0xbe, 0x63, 0x3c, 0x18, 0x2f,
	0x18, 0xff, 0x1a, 0x4e, 0x58, 0x3d, 0x69, 0xe0, 0x62, 0xd6, 0xaf, 0x1e, 0xdd, 0x53, 0x2a, 0x41,
	0xf5, 0x78, 0xbd, 0x9d, 0x1a, 0x27, 0xf1, 0x7c, 0x1e, 0x47, 0x69, 0xb7, 0xb6, 0xee, 0x72, 0x9f,
	0x87, 0x62, 0x35, 0x63, 0x7e, 0xc0, 0xf8, 0x38, 0xf6, 0x79, 0xa0, 0x14, 0xe6, 0x12, 0x2a, 0x64,
	0x32, 0x89, 0x97, 0x91, 0x70, 0x85, 0x2f, 0x16, 0xb8, 0x03, 0x48, 0x49, 0x47, 0x63, 0xce, 0xfc,
	0x2f, 0x41, 0x7c, 0x17, 0x19, 0x5a, 0x4d, 0x3b, 0x2d, 0x37, 0x9e, 0xd5, 0x33, 0x58, 0x9d, 0x26,
	0x0a, 0x7b, 0x03, 0xa3, 0x87, 0xca, 0xd4, 0xcc, 0x3c, 0xf8, 0x04, 0x20, 0x5a, 0xce, 0x25, 0x84,
	0x05, 0x0b, 0x63, 0xa7, 0xa6, 0x9d, 0xee, 0xd3, 0x52, 0xb4, 0x9c, 0x37, 0x93, 0x0d, 0xf3, 0x57,
	0x01, 0xca, 0x9d, 0x64, 0x8e, 0x8f, 0x4b, 0xc6, 0x57, 0xd8, 0x00, 0xdd, 0x57, 0xc7, 0x48, 0x9e,
	0x56, 0xa2, 0x59, 0x89, 0xdf, 0x82, 0x3e, 0x0d, 0x67, 0x82, 0x71, 0x45, 0x29, 0x37, 0x4e, 0x36,
	0xe7, 0xd8, 0x22, 0xd4, 0x3b, 0x4a, 0x44, 0x33, 0xb5, 0x34, 0x2e, 0x62, 0x2e, 0xc2, 0xe8, 0xc6,
	0xc8, 0xff, 0xcf, 0xe8, 0x2a, 0x11, 0xcd, 0xd4, 0xd5, 0xdf, 0x1a, 0xe8, 0x29, 0x0d, 0x13, 0x28,
	0xa7, 0x71, 0x88, 0x90, 0x71, 0x23, 0xa8, 0x69, 0xa7, 0x07, 0x8d, 0xda, 0xc3, 0x20, 0x95, 0x8a,
	0x17, 0x32, 0x4e, 0x81, 0xaf, 0xd7, 0xb8, 0x0b, 0xfb, 0x33, 0x3f, 0x0a, 0x46, 0xfe, 0x74, 0x1a,
	0x46, 0xa1, 0x58, 0x19, 0x2c, 0x81, 0x98, 0x0f, 0x43, 0x6c, 0x3f, 0x0a, 0x48, 0xaa, 0xa4, 0x95,
	0xd9, 0x56, 0x25, 0x07, 0xba, 0x9d, 0xf9, 0x91, 0x60, 0x81, 0x31, 0x4d, 0x10, 0x8f, 0x0c, 0x34,
	0x50, 0x22, 0x9a, 0xa9, 0xab, 0xdf, 0x34, 0xd0, 0xd3, 0x29, 0xf1, 0x99, 0x4a, 0x65, 0x34, 0x5e,
	0x19, 0x3f, 0xb4, 0x84, 0x72, 0xfc, 0x78, 0x2c, 0xcd, 0x15, 0x2d, 0x2c, 0x92, 0x5f, 0xfc, 0x01,
	0x20, 0xf1, 0xc5, 0x3c, 0x60, 0xdc, 0xf8, 0xa9, 0xac, 0x2f, 0x1e, 0xb7, 0xf6, 0xa5, 0x8e, 0x96,
	0x16, 0xd9, 0xd2, 0xfc, 0x04, 0xb0, 0x09, 0x08, 0x1f, 0x00, 0x10, 0x67, 0x38, 0xa2, 0x84, 0xf6,
	0xbc, 0x21, 0xca, 0x61, 0x80, 0x42, 0xab, 0x7f, 0x71, 0xd1, 0x77, 0x90, 0x86, 0xcb, 0xa0, 0x5f,
	0x3a, 0x97, 0xee, 0x25, 0xb1, 0xd1, 0x0e, 0x2e, 0xc2, 0x2e, 0x25, 0xd4, 0x42, 0x79, 0xb9, 0xb2,
	0x06, 0xbd, 0x16, 0xda, 0xc5, 0xfb, 0x50, 0xb2, 0xad, 0xae, 0xe5, 0xb4, 0x09, 0x1d, 0xa2, 0x3d,
	0x73, 0x08, 0x95, 0xed, 0xd4, 0x70, 0x05, 0x8a, 0x92, 0x6d, 0x13, 0xa7, 0x8d, 0x72, 0xd2, 0xe6,
	0xf6, 0x7b, 0x36, 0xd2, 0x70, 0x09, 0xf6, 0x5c, 0xaf, 0xef, 0x58, 0x8a, 0xea, 0xca, 0x76, 0x42,
	0xb5, 0xc9, 0x15, 0x41, 0xbb, 0xb2, 0x7d, 0x4d, 0x3c, 0x8b, 0xa2, 0x3d, 0xac, 0x43, 0xbe, 0xd7,
	0xb2, 0x50, 0xc1, 0x7c, 0x07, 0x7a, 0x9a, 0x26, 0x3e, 0x84, 0xb2, 0xa4, 0x0e, 0x6c, 0xe2, 0x78,
	0x96, 0x04, 0x97, 0x41, 0xcf, 0x0a, 0x4d, 0x76, 0x9d, 0xbe, 0xb7, 0xee, 0xee, 0x98, 0x04, 0x0a,
	0x2a, 0x41, 0x09, 0x23, 0x5d, 0x4b, 0xcd, 0x98, 0xce, 0xab, 0x61, 0x04, 0x95, 0x2e, 0xed, 0x5f,
	0x7b, 0xe7, 0x23, 0x77, 0x60, 0x49, 0x83, 0xdc, 0x39, 0x27, 0xf4, 0xca, 0x72, 0xbd, 0x91, 0xdb,
	0xfb, 0x6c, 0xa1, 0xbc, 0xf9, 0x12, 0x4a, 0xeb, 0x24, 0x65, 0x60, 0x6d, 0xcb, 0x6d, 0x59, 0x4e,
	0xbb, 0xe7, 0x74, 0x51, 0x4e, 0x66, 0x40, 0xd6, 0xa5, 0xd6, 0xf8, 0xae, 0x41, 0x51, 0x5d, 0x41,
	0xbb, 0x89, 0xcf, 0xa0, 0xd4, 0x65, 0x42, 0x95, 0xf8, 0x68, 0x73, 0x47, 0x6e, 0x18, 0xdd, 0xcc,
	0x58, 0x2f, 0x12, 0x67, 0x6f, 0xaa, 0xe8, 0xfe, 0xd5, 0x99, 0x39, 0xdc, 0x82, 0xc3, 0x2e, 0x13,
	0x7f, 0x7d, 0x0e, 0x9e, 0xdc, 0x77, 0xbb, 0x82, 0xcb, 0x77, 0x64, 0x6b, 0x7f, 0x5b, 0x6f, 0xe6,
	0xf0, 0x7b, 0x80, 0x4e, 0x18, 0x05, 0xff, 0x3e, 0x7d, 0xeb, 0x1f, 0x52, 0x7d, 0xba, 0xf5, 0x2d,
	0x61, 0xb7, 0xcc, 0x17, 0x2c, 0x48, 0x8e, 0x65, 0xe6, 0xc6, 0x85, 0xa4, 0xf3, 0xfa, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0x84, 0x01, 0x95, 0x1a, 0x05, 0x00, 0x00,
}
