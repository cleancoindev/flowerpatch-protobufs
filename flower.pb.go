// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protobuf/flower.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Flower_Version int32

const (
	Flower_VERSION_ONE Flower_Version = 0
)

var Flower_Version_name = map[int32]string{
	0: "VERSION_ONE",
}

var Flower_Version_value = map[string]int32{
	"VERSION_ONE": 0,
}

func (x Flower_Version) String() string {
	return proto.EnumName(Flower_Version_name, int32(x))
}

func (Flower_Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0}
}

type Flower_Stats_SkeletonType int32

const (
	Flower_Stats_THREE_LEAF Flower_Stats_SkeletonType = 0
)

var Flower_Stats_SkeletonType_name = map[int32]string{
	0: "THREE_LEAF",
}

var Flower_Stats_SkeletonType_value = map[string]int32{
	"THREE_LEAF": 0,
}

func (x Flower_Stats_SkeletonType) String() string {
	return proto.EnumName(Flower_Stats_SkeletonType_name, int32(x))
}

func (Flower_Stats_SkeletonType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 0}
}

type Flower_Stats_BaseNugType int32

const (
	Flower_Stats_NUG_BASE_BASIC    Flower_Stats_BaseNugType = 0
	Flower_Stats_NUG_BASE_EGGPLANT Flower_Stats_BaseNugType = 1
	Flower_Stats_NUG_BASE_HAIRY    Flower_Stats_BaseNugType = 2
	Flower_Stats_NUG_BASE_LUMP     Flower_Stats_BaseNugType = 3
	Flower_Stats_NUG_BASE_MELLOW   Flower_Stats_BaseNugType = 4
	Flower_Stats_NUG_BASE_ONION    Flower_Stats_BaseNugType = 5
)

var Flower_Stats_BaseNugType_name = map[int32]string{
	0: "NUG_BASE_BASIC",
	1: "NUG_BASE_EGGPLANT",
	2: "NUG_BASE_HAIRY",
	3: "NUG_BASE_LUMP",
	4: "NUG_BASE_MELLOW",
	5: "NUG_BASE_ONION",
}

var Flower_Stats_BaseNugType_value = map[string]int32{
	"NUG_BASE_BASIC":    0,
	"NUG_BASE_EGGPLANT": 1,
	"NUG_BASE_HAIRY":    2,
	"NUG_BASE_LUMP":     3,
	"NUG_BASE_MELLOW":   4,
	"NUG_BASE_ONION":    5,
}

func (x Flower_Stats_BaseNugType) String() string {
	return proto.EnumName(Flower_Stats_BaseNugType_name, int32(x))
}

func (Flower_Stats_BaseNugType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 1}
}

type Flower_Stats_PowderType int32

const (
	Flower_Stats_BASIC_CONFIG_1    Flower_Stats_PowderType = 0
	Flower_Stats_BASIC_CONFIG_2    Flower_Stats_PowderType = 1
	Flower_Stats_EGGPLANT_CONFIG_1 Flower_Stats_PowderType = 2
	Flower_Stats_HAIRY_CONFIG_1    Flower_Stats_PowderType = 3
	Flower_Stats_LUMP_CONFIG_1     Flower_Stats_PowderType = 4
	Flower_Stats_MELLOW_CONFIG_1   Flower_Stats_PowderType = 5
	Flower_Stats_ONION_CONFIG_1    Flower_Stats_PowderType = 6
)

var Flower_Stats_PowderType_name = map[int32]string{
	0: "BASIC_CONFIG_1",
	1: "BASIC_CONFIG_2",
	2: "EGGPLANT_CONFIG_1",
	3: "HAIRY_CONFIG_1",
	4: "LUMP_CONFIG_1",
	5: "MELLOW_CONFIG_1",
	6: "ONION_CONFIG_1",
}

var Flower_Stats_PowderType_value = map[string]int32{
	"BASIC_CONFIG_1":    0,
	"BASIC_CONFIG_2":    1,
	"EGGPLANT_CONFIG_1": 2,
	"HAIRY_CONFIG_1":    3,
	"LUMP_CONFIG_1":     4,
	"MELLOW_CONFIG_1":   5,
	"ONION_CONFIG_1":    6,
}

func (x Flower_Stats_PowderType) String() string {
	return proto.EnumName(Flower_Stats_PowderType_name, int32(x))
}

func (Flower_Stats_PowderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 2}
}

type Flower_Stats_StemType int32

const (
	Flower_Stats_STEM_1 Flower_Stats_StemType = 0
	Flower_Stats_STEM_2 Flower_Stats_StemType = 1
	Flower_Stats_STEM_3 Flower_Stats_StemType = 2
	Flower_Stats_STEM_4 Flower_Stats_StemType = 3
	Flower_Stats_STEM_5 Flower_Stats_StemType = 4
	Flower_Stats_STEM_6 Flower_Stats_StemType = 5
	Flower_Stats_STEM_7 Flower_Stats_StemType = 6
)

var Flower_Stats_StemType_name = map[int32]string{
	0: "STEM_1",
	1: "STEM_2",
	2: "STEM_3",
	3: "STEM_4",
	4: "STEM_5",
	5: "STEM_6",
	6: "STEM_7",
}

var Flower_Stats_StemType_value = map[string]int32{
	"STEM_1": 0,
	"STEM_2": 1,
	"STEM_3": 2,
	"STEM_4": 3,
	"STEM_5": 4,
	"STEM_6": 5,
	"STEM_7": 6,
}

func (x Flower_Stats_StemType) String() string {
	return proto.EnumName(Flower_Stats_StemType_name, int32(x))
}

func (Flower_Stats_StemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 3}
}

type Flower_Stats_MainLeafType int32

const (
	Flower_Stats_BASE_LEAF_1 Flower_Stats_MainLeafType = 0
	Flower_Stats_BASE_LEAF_2 Flower_Stats_MainLeafType = 1
	Flower_Stats_BASE_LEAF_3 Flower_Stats_MainLeafType = 2
	Flower_Stats_BASE_LEAF_4 Flower_Stats_MainLeafType = 3
	Flower_Stats_BASE_LEAF_5 Flower_Stats_MainLeafType = 4
	Flower_Stats_BASE_LEAF_6 Flower_Stats_MainLeafType = 5
)

var Flower_Stats_MainLeafType_name = map[int32]string{
	0: "BASE_LEAF_1",
	1: "BASE_LEAF_2",
	2: "BASE_LEAF_3",
	3: "BASE_LEAF_4",
	4: "BASE_LEAF_5",
	5: "BASE_LEAF_6",
}

var Flower_Stats_MainLeafType_value = map[string]int32{
	"BASE_LEAF_1": 0,
	"BASE_LEAF_2": 1,
	"BASE_LEAF_3": 2,
	"BASE_LEAF_4": 3,
	"BASE_LEAF_5": 4,
	"BASE_LEAF_6": 5,
}

func (x Flower_Stats_MainLeafType) String() string {
	return proto.EnumName(Flower_Stats_MainLeafType_name, int32(x))
}

func (Flower_Stats_MainLeafType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 4}
}

type Flower_Stats_NugLeafType int32

const (
	Flower_Stats_NUG_LEAF_1 Flower_Stats_NugLeafType = 0
	Flower_Stats_NUG_LEAF_2 Flower_Stats_NugLeafType = 1
	Flower_Stats_NUG_LEAF_3 Flower_Stats_NugLeafType = 2
	Flower_Stats_NUG_LEAF_4 Flower_Stats_NugLeafType = 3
	Flower_Stats_NUG_LEAF_5 Flower_Stats_NugLeafType = 4
	Flower_Stats_NUG_LEAF_6 Flower_Stats_NugLeafType = 5
)

var Flower_Stats_NugLeafType_name = map[int32]string{
	0: "NUG_LEAF_1",
	1: "NUG_LEAF_2",
	2: "NUG_LEAF_3",
	3: "NUG_LEAF_4",
	4: "NUG_LEAF_5",
	5: "NUG_LEAF_6",
}

var Flower_Stats_NugLeafType_value = map[string]int32{
	"NUG_LEAF_1": 0,
	"NUG_LEAF_2": 1,
	"NUG_LEAF_3": 2,
	"NUG_LEAF_4": 3,
	"NUG_LEAF_5": 4,
	"NUG_LEAF_6": 5,
}

func (x Flower_Stats_NugLeafType) String() string {
	return proto.EnumName(Flower_Stats_NugLeafType_name, int32(x))
}

func (Flower_Stats_NugLeafType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 5}
}

type Flower_Stats_BodyType int32

const (
	Flower_Stats_SATIVA    Flower_Stats_BodyType = 0
	Flower_Stats_INDICA    Flower_Stats_BodyType = 1
	Flower_Stats_RUDERALIS Flower_Stats_BodyType = 2
)

var Flower_Stats_BodyType_name = map[int32]string{
	0: "SATIVA",
	1: "INDICA",
	2: "RUDERALIS",
}

var Flower_Stats_BodyType_value = map[string]int32{
	"SATIVA":    0,
	"INDICA":    1,
	"RUDERALIS": 2,
}

func (x Flower_Stats_BodyType) String() string {
	return proto.EnumName(Flower_Stats_BodyType_name, int32(x))
}

func (Flower_Stats_BodyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 6}
}

type Flower_Stats_Set int32

const (
	Flower_Stats_NONE        Flower_Stats_Set = 0
	Flower_Stats_GENESIS     Flower_Stats_Set = 1
	Flower_Stats_CRYPTO      Flower_Stats_Set = 2
	Flower_Stats_CLASSICS    Flower_Stats_Set = 3
	Flower_Stats_ANCIENT     Flower_Stats_Set = 4
	Flower_Stats_FOUR_TWENTY Flower_Stats_Set = 5
	Flower_Stats_DELTA       Flower_Stats_Set = 6
)

var Flower_Stats_Set_name = map[int32]string{
	0: "NONE",
	1: "GENESIS",
	2: "CRYPTO",
	3: "CLASSICS",
	4: "ANCIENT",
	5: "FOUR_TWENTY",
	6: "DELTA",
}

var Flower_Stats_Set_value = map[string]int32{
	"NONE":        0,
	"GENESIS":     1,
	"CRYPTO":      2,
	"CLASSICS":    3,
	"ANCIENT":     4,
	"FOUR_TWENTY": 5,
	"DELTA":       6,
}

func (x Flower_Stats_Set) String() string {
	return proto.EnumName(Flower_Stats_Set_name, int32(x))
}

func (Flower_Stats_Set) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 7}
}

type Flower_Stats_LandAffinity int32

const (
	Flower_Stats_SOIL  Flower_Stats_LandAffinity = 0
	Flower_Stats_STONE Flower_Stats_LandAffinity = 1
	Flower_Stats_SAND  Flower_Stats_LandAffinity = 2
	Flower_Stats_LAVA  Flower_Stats_LandAffinity = 3
	Flower_Stats_WATER Flower_Stats_LandAffinity = 4
	Flower_Stats_ICE   Flower_Stats_LandAffinity = 5
)

var Flower_Stats_LandAffinity_name = map[int32]string{
	0: "SOIL",
	1: "STONE",
	2: "SAND",
	3: "LAVA",
	4: "WATER",
	5: "ICE",
}

var Flower_Stats_LandAffinity_value = map[string]int32{
	"SOIL":  0,
	"STONE": 1,
	"SAND":  2,
	"LAVA":  3,
	"WATER": 4,
	"ICE":   5,
}

func (x Flower_Stats_LandAffinity) String() string {
	return proto.EnumName(Flower_Stats_LandAffinity_name, int32(x))
}

func (Flower_Stats_LandAffinity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 8}
}

type Flower_Stats_LandVariant int32

const (
	Flower_Stats_LAND_VARIANT_NONE Flower_Stats_LandVariant = 0
)

var Flower_Stats_LandVariant_name = map[int32]string{
	0: "LAND_VARIANT_NONE",
}

var Flower_Stats_LandVariant_value = map[string]int32{
	"LAND_VARIANT_NONE": 0,
}

func (x Flower_Stats_LandVariant) String() string {
	return proto.EnumName(Flower_Stats_LandVariant_name, int32(x))
}

func (Flower_Stats_LandVariant) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 9}
}

type Flower_Stats_IdleAnimation int32

const (
	Flower_Stats_IDLE Flower_Stats_IdleAnimation = 0
)

var Flower_Stats_IdleAnimation_name = map[int32]string{
	0: "IDLE",
}

var Flower_Stats_IdleAnimation_value = map[string]int32{
	"IDLE": 0,
}

func (x Flower_Stats_IdleAnimation) String() string {
	return proto.EnumName(Flower_Stats_IdleAnimation_name, int32(x))
}

func (Flower_Stats_IdleAnimation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 10}
}

type Flower_Stats_ParticleAlgorithm int32

const (
	Flower_Stats_PARTICLE_NONE        Flower_Stats_ParticleAlgorithm = 0
	Flower_Stats_POWDER_NUG           Flower_Stats_ParticleAlgorithm = 1
	Flower_Stats_HALO                 Flower_Stats_ParticleAlgorithm = 2
	Flower_Stats_HEART_RAIN           Flower_Stats_ParticleAlgorithm = 3
	Flower_Stats_BROKEN_HEART_RAIN    Flower_Stats_ParticleAlgorithm = 4
	Flower_Stats_CANNABIS_RAIN        Flower_Stats_ParticleAlgorithm = 5
	Flower_Stats_LAZERS               Flower_Stats_ParticleAlgorithm = 6
	Flower_Stats_HAZE                 Flower_Stats_ParticleAlgorithm = 7
	Flower_Stats_FIRE                 Flower_Stats_ParticleAlgorithm = 8
	Flower_Stats_BUBBLE               Flower_Stats_ParticleAlgorithm = 9
	Flower_Stats_INCANTATION          Flower_Stats_ParticleAlgorithm = 10
	Flower_Stats_ALPHA_PARTICLE       Flower_Stats_ParticleAlgorithm = 11
	Flower_Stats_BETA_PARTICLE        Flower_Stats_ParticleAlgorithm = 12
	Flower_Stats_GAMMA_PARTICLE       Flower_Stats_ParticleAlgorithm = 13
	Flower_Stats_DELTA_PARTICLE       Flower_Stats_ParticleAlgorithm = 14
	Flower_Stats_CANNABIS_INCANTATION Flower_Stats_ParticleAlgorithm = 15
	Flower_Stats_CANNABIS_LAZERS      Flower_Stats_ParticleAlgorithm = 16
)

var Flower_Stats_ParticleAlgorithm_name = map[int32]string{
	0:  "PARTICLE_NONE",
	1:  "POWDER_NUG",
	2:  "HALO",
	3:  "HEART_RAIN",
	4:  "BROKEN_HEART_RAIN",
	5:  "CANNABIS_RAIN",
	6:  "LAZERS",
	7:  "HAZE",
	8:  "FIRE",
	9:  "BUBBLE",
	10: "INCANTATION",
	11: "ALPHA_PARTICLE",
	12: "BETA_PARTICLE",
	13: "GAMMA_PARTICLE",
	14: "DELTA_PARTICLE",
	15: "CANNABIS_INCANTATION",
	16: "CANNABIS_LAZERS",
}

var Flower_Stats_ParticleAlgorithm_value = map[string]int32{
	"PARTICLE_NONE":        0,
	"POWDER_NUG":           1,
	"HALO":                 2,
	"HEART_RAIN":           3,
	"BROKEN_HEART_RAIN":    4,
	"CANNABIS_RAIN":        5,
	"LAZERS":               6,
	"HAZE":                 7,
	"FIRE":                 8,
	"BUBBLE":               9,
	"INCANTATION":          10,
	"ALPHA_PARTICLE":       11,
	"BETA_PARTICLE":        12,
	"GAMMA_PARTICLE":       13,
	"DELTA_PARTICLE":       14,
	"CANNABIS_INCANTATION": 15,
	"CANNABIS_LAZERS":      16,
}

func (x Flower_Stats_ParticleAlgorithm) String() string {
	return proto.EnumName(Flower_Stats_ParticleAlgorithm_name, int32(x))
}

func (Flower_Stats_ParticleAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 11}
}

type Flower_Stats_Smell int32

const (
	Flower_Stats_CITRUS Flower_Stats_Smell = 0
	Flower_Stats_FLORAL Flower_Stats_Smell = 1
	Flower_Stats_SKUNK  Flower_Stats_Smell = 2
	Flower_Stats_EARTH  Flower_Stats_Smell = 3
	Flower_Stats_CHEESE Flower_Stats_Smell = 4
	Flower_Stats_SMOKE  Flower_Stats_Smell = 5
	Flower_Stats_PINE   Flower_Stats_Smell = 6
	Flower_Stats_FRUIT  Flower_Stats_Smell = 7
)

var Flower_Stats_Smell_name = map[int32]string{
	0: "CITRUS",
	1: "FLORAL",
	2: "SKUNK",
	3: "EARTH",
	4: "CHEESE",
	5: "SMOKE",
	6: "PINE",
	7: "FRUIT",
}

var Flower_Stats_Smell_value = map[string]int32{
	"CITRUS": 0,
	"FLORAL": 1,
	"SKUNK":  2,
	"EARTH":  3,
	"CHEESE": 4,
	"SMOKE":  5,
	"PINE":   6,
	"FRUIT":  7,
}

func (x Flower_Stats_Smell) String() string {
	return proto.EnumName(Flower_Stats_Smell_name, int32(x))
}

func (Flower_Stats_Smell) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0, 12}
}

type Flower struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              Flower_Version `protobuf:"varint,2,opt,name=version,proto3,enum=protobuf.Flower_Version" json:"version,omitempty"`
	DescriptionId        int64          `protobuf:"varint,3,opt,name=description_id,json=descriptionId,proto3" json:"description_id,omitempty"`
	UniqueId             int64          `protobuf:"varint,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	StoreDbId            int64          `protobuf:"varint,5,opt,name=store_db_id,json=storeDbId,proto3" json:"store_db_id,omitempty"`
	ParentOneId          int64          `protobuf:"varint,6,opt,name=parent_one_id,json=parentOneId,proto3" json:"parent_one_id,omitempty"`
	ParentTwoId          int64          `protobuf:"varint,7,opt,name=parent_two_id,json=parentTwoId,proto3" json:"parent_two_id,omitempty"`
	CreatedAfterBlock    int64          `protobuf:"varint,8,opt,name=created_after_block,json=createdAfterBlock,proto3" json:"created_after_block,omitempty"`
	Stats                *Flower_Stats  `protobuf:"bytes,15,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" datastore:"-"`
	XXX_unrecognized     []byte         `json:"-" datastore:"-"`
	XXX_sizecache        int32          `json:"-" datastore:"-"`
}

func (m *Flower) Reset()         { *m = Flower{} }
func (m *Flower) String() string { return proto.CompactTextString(m) }
func (*Flower) ProtoMessage()    {}
func (*Flower) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0}
}

func (m *Flower) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flower.Unmarshal(m, b)
}
func (m *Flower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flower.Marshal(b, m, deterministic)
}
func (m *Flower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flower.Merge(m, src)
}
func (m *Flower) XXX_Size() int {
	return xxx_messageInfo_Flower.Size(m)
}
func (m *Flower) XXX_DiscardUnknown() {
	xxx_messageInfo_Flower.DiscardUnknown(m)
}

var xxx_messageInfo_Flower proto.InternalMessageInfo

func (m *Flower) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Flower) GetVersion() Flower_Version {
	if m != nil {
		return m.Version
	}
	return Flower_VERSION_ONE
}

func (m *Flower) GetDescriptionId() int64 {
	if m != nil {
		return m.DescriptionId
	}
	return 0
}

func (m *Flower) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *Flower) GetStoreDbId() int64 {
	if m != nil {
		return m.StoreDbId
	}
	return 0
}

func (m *Flower) GetParentOneId() int64 {
	if m != nil {
		return m.ParentOneId
	}
	return 0
}

func (m *Flower) GetParentTwoId() int64 {
	if m != nil {
		return m.ParentTwoId
	}
	return 0
}

func (m *Flower) GetCreatedAfterBlock() int64 {
	if m != nil {
		return m.CreatedAfterBlock
	}
	return 0
}

func (m *Flower) GetStats() *Flower_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type Flower_Stats struct {
	Mutability             int32                          `protobuf:"varint,100,opt,name=mutability,proto3" json:"mutability,omitempty"`
	GrowthSpeed            int32                          `protobuf:"varint,101,opt,name=growth_speed,json=growthSpeed,proto3" json:"growth_speed,omitempty"`
	HarvestSize            int32                          `protobuf:"varint,102,opt,name=harvest_size,json=harvestSize,proto3" json:"harvest_size,omitempty"`
	HarvestSpread          int32                          `protobuf:"varint,103,opt,name=harvest_spread,json=harvestSpread,proto3" json:"harvest_spread,omitempty"`
	SeedDrop               int32                          `protobuf:"varint,200,opt,name=seed_drop,json=seedDrop,proto3" json:"seed_drop,omitempty"`
	BerryDrop              int32                          `protobuf:"varint,201,opt,name=berry_drop,json=berryDrop,proto3" json:"berry_drop,omitempty"`
	FlowerDrop             int32                          `protobuf:"varint,202,opt,name=flower_drop,json=flowerDrop,proto3" json:"flower_drop,omitempty"`
	NugDrop                int32                          `protobuf:"varint,203,opt,name=nug_drop,json=nugDrop,proto3" json:"nug_drop,omitempty"`
	Height                 int32                          `protobuf:"varint,300,opt,name=height,proto3" json:"height,omitempty"`
	Thc                    int32                          `protobuf:"varint,301,opt,name=thc,proto3" json:"thc,omitempty"`
	Cbd                    int32                          `protobuf:"varint,302,opt,name=cbd,proto3" json:"cbd,omitempty"`
	SmellPrimaryStrength   int32                          `protobuf:"varint,303,opt,name=smell_primary_strength,json=smellPrimaryStrength,proto3" json:"smell_primary_strength,omitempty"`
	SmellSecondaryStrength int32                          `protobuf:"varint,304,opt,name=smell_secondary_strength,json=smellSecondaryStrength,proto3" json:"smell_secondary_strength,omitempty"`
	BaseNugScale           int32                          `protobuf:"varint,305,opt,name=base_nug_scale,json=baseNugScale,proto3" json:"base_nug_scale,omitempty"`
	MainLeafScale          int32                          `protobuf:"varint,306,opt,name=main_leaf_scale,json=mainLeafScale,proto3" json:"main_leaf_scale,omitempty"`
	NugLeafScale           int32                          `protobuf:"varint,307,opt,name=nug_leaf_scale,json=nugLeafScale,proto3" json:"nug_leaf_scale,omitempty"`
	StemScale              int32                          `protobuf:"varint,308,opt,name=stem_scale,json=stemScale,proto3" json:"stem_scale,omitempty"`
	BaseNugColor           string                         `protobuf:"bytes,400,opt,name=base_nug_color,json=baseNugColor,proto3" json:"base_nug_color,omitempty"`
	LeafColor              string                         `protobuf:"bytes,401,opt,name=leaf_color,json=leafColor,proto3" json:"leaf_color,omitempty"`
	StemColor              string                         `protobuf:"bytes,402,opt,name=stem_color,json=stemColor,proto3" json:"stem_color,omitempty"`
	PowderColor            string                         `protobuf:"bytes,403,opt,name=powder_color,json=powderColor,proto3" json:"powder_color,omitempty"`
	SkeletonType           Flower_Stats_SkeletonType      `protobuf:"varint,500,opt,name=skeleton_type,json=skeletonType,proto3,enum=protobuf.Flower_Stats_SkeletonType" json:"skeleton_type,omitempty"`
	BaseNugType            Flower_Stats_BaseNugType       `protobuf:"varint,501,opt,name=base_nug_type,json=baseNugType,proto3,enum=protobuf.Flower_Stats_BaseNugType" json:"base_nug_type,omitempty"`
	PowderType             Flower_Stats_PowderType        `protobuf:"varint,502,opt,name=powder_type,json=powderType,proto3,enum=protobuf.Flower_Stats_PowderType" json:"powder_type,omitempty"`
	StemType               Flower_Stats_StemType          `protobuf:"varint,503,opt,name=stem_type,json=stemType,proto3,enum=protobuf.Flower_Stats_StemType" json:"stem_type,omitempty"`
	MainLeafType           Flower_Stats_MainLeafType      `protobuf:"varint,504,opt,name=main_leaf_type,json=mainLeafType,proto3,enum=protobuf.Flower_Stats_MainLeafType" json:"main_leaf_type,omitempty"`
	NugLeafType            Flower_Stats_NugLeafType       `protobuf:"varint,505,opt,name=nug_leaf_type,json=nugLeafType,proto3,enum=protobuf.Flower_Stats_NugLeafType" json:"nug_leaf_type,omitempty"`
	BodyType               Flower_Stats_BodyType          `protobuf:"varint,506,opt,name=body_type,json=bodyType,proto3,enum=protobuf.Flower_Stats_BodyType" json:"body_type,omitempty"`
	Set                    Flower_Stats_Set               `protobuf:"varint,600,opt,name=set,proto3,enum=protobuf.Flower_Stats_Set" json:"set,omitempty"`
	LandAffinity           Flower_Stats_LandAffinity      `protobuf:"varint,601,opt,name=land_affinity,json=landAffinity,proto3,enum=protobuf.Flower_Stats_LandAffinity" json:"land_affinity,omitempty"`
	LandVariant            Flower_Stats_LandVariant       `protobuf:"varint,602,opt,name=land_variant,json=landVariant,proto3,enum=protobuf.Flower_Stats_LandVariant" json:"land_variant,omitempty"`
	IdleAnimation          Flower_Stats_IdleAnimation     `protobuf:"varint,603,opt,name=idle_animation,json=idleAnimation,proto3,enum=protobuf.Flower_Stats_IdleAnimation" json:"idle_animation,omitempty"`
	ParticleAlgorithm      Flower_Stats_ParticleAlgorithm `protobuf:"varint,604,opt,name=particle_algorithm,json=particleAlgorithm,proto3,enum=protobuf.Flower_Stats_ParticleAlgorithm" json:"particle_algorithm,omitempty"`
	SmellPrimary           Flower_Stats_Smell             `protobuf:"varint,605,opt,name=smell_primary,json=smellPrimary,proto3,enum=protobuf.Flower_Stats_Smell" json:"smell_primary,omitempty"`
	SmellSecondary         Flower_Stats_Smell             `protobuf:"varint,606,opt,name=smell_secondary,json=smellSecondary,proto3,enum=protobuf.Flower_Stats_Smell" json:"smell_secondary,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                       `json:"-" datastore:"-"`
	XXX_unrecognized       []byte                         `json:"-" datastore:"-"`
	XXX_sizecache          int32                          `json:"-" datastore:"-"`
}

func (m *Flower_Stats) Reset()         { *m = Flower_Stats{} }
func (m *Flower_Stats) String() string { return proto.CompactTextString(m) }
func (*Flower_Stats) ProtoMessage()    {}
func (*Flower_Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f4fbad636b19889, []int{0, 0}
}

func (m *Flower_Stats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flower_Stats.Unmarshal(m, b)
}
func (m *Flower_Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flower_Stats.Marshal(b, m, deterministic)
}
func (m *Flower_Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flower_Stats.Merge(m, src)
}
func (m *Flower_Stats) XXX_Size() int {
	return xxx_messageInfo_Flower_Stats.Size(m)
}
func (m *Flower_Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Flower_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Flower_Stats proto.InternalMessageInfo

func (m *Flower_Stats) GetMutability() int32 {
	if m != nil {
		return m.Mutability
	}
	return 0
}

func (m *Flower_Stats) GetGrowthSpeed() int32 {
	if m != nil {
		return m.GrowthSpeed
	}
	return 0
}

func (m *Flower_Stats) GetHarvestSize() int32 {
	if m != nil {
		return m.HarvestSize
	}
	return 0
}

func (m *Flower_Stats) GetHarvestSpread() int32 {
	if m != nil {
		return m.HarvestSpread
	}
	return 0
}

func (m *Flower_Stats) GetSeedDrop() int32 {
	if m != nil {
		return m.SeedDrop
	}
	return 0
}

func (m *Flower_Stats) GetBerryDrop() int32 {
	if m != nil {
		return m.BerryDrop
	}
	return 0
}

func (m *Flower_Stats) GetFlowerDrop() int32 {
	if m != nil {
		return m.FlowerDrop
	}
	return 0
}

func (m *Flower_Stats) GetNugDrop() int32 {
	if m != nil {
		return m.NugDrop
	}
	return 0
}

func (m *Flower_Stats) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Flower_Stats) GetThc() int32 {
	if m != nil {
		return m.Thc
	}
	return 0
}

func (m *Flower_Stats) GetCbd() int32 {
	if m != nil {
		return m.Cbd
	}
	return 0
}

func (m *Flower_Stats) GetSmellPrimaryStrength() int32 {
	if m != nil {
		return m.SmellPrimaryStrength
	}
	return 0
}

func (m *Flower_Stats) GetSmellSecondaryStrength() int32 {
	if m != nil {
		return m.SmellSecondaryStrength
	}
	return 0
}

func (m *Flower_Stats) GetBaseNugScale() int32 {
	if m != nil {
		return m.BaseNugScale
	}
	return 0
}

func (m *Flower_Stats) GetMainLeafScale() int32 {
	if m != nil {
		return m.MainLeafScale
	}
	return 0
}

func (m *Flower_Stats) GetNugLeafScale() int32 {
	if m != nil {
		return m.NugLeafScale
	}
	return 0
}

func (m *Flower_Stats) GetStemScale() int32 {
	if m != nil {
		return m.StemScale
	}
	return 0
}

func (m *Flower_Stats) GetBaseNugColor() string {
	if m != nil {
		return m.BaseNugColor
	}
	return ""
}

func (m *Flower_Stats) GetLeafColor() string {
	if m != nil {
		return m.LeafColor
	}
	return ""
}

func (m *Flower_Stats) GetStemColor() string {
	if m != nil {
		return m.StemColor
	}
	return ""
}

func (m *Flower_Stats) GetPowderColor() string {
	if m != nil {
		return m.PowderColor
	}
	return ""
}

func (m *Flower_Stats) GetSkeletonType() Flower_Stats_SkeletonType {
	if m != nil {
		return m.SkeletonType
	}
	return Flower_Stats_THREE_LEAF
}

func (m *Flower_Stats) GetBaseNugType() Flower_Stats_BaseNugType {
	if m != nil {
		return m.BaseNugType
	}
	return Flower_Stats_NUG_BASE_BASIC
}

func (m *Flower_Stats) GetPowderType() Flower_Stats_PowderType {
	if m != nil {
		return m.PowderType
	}
	return Flower_Stats_BASIC_CONFIG_1
}

func (m *Flower_Stats) GetStemType() Flower_Stats_StemType {
	if m != nil {
		return m.StemType
	}
	return Flower_Stats_STEM_1
}

func (m *Flower_Stats) GetMainLeafType() Flower_Stats_MainLeafType {
	if m != nil {
		return m.MainLeafType
	}
	return Flower_Stats_BASE_LEAF_1
}

func (m *Flower_Stats) GetNugLeafType() Flower_Stats_NugLeafType {
	if m != nil {
		return m.NugLeafType
	}
	return Flower_Stats_NUG_LEAF_1
}

func (m *Flower_Stats) GetBodyType() Flower_Stats_BodyType {
	if m != nil {
		return m.BodyType
	}
	return Flower_Stats_SATIVA
}

func (m *Flower_Stats) GetSet() Flower_Stats_Set {
	if m != nil {
		return m.Set
	}
	return Flower_Stats_NONE
}

func (m *Flower_Stats) GetLandAffinity() Flower_Stats_LandAffinity {
	if m != nil {
		return m.LandAffinity
	}
	return Flower_Stats_SOIL
}

func (m *Flower_Stats) GetLandVariant() Flower_Stats_LandVariant {
	if m != nil {
		return m.LandVariant
	}
	return Flower_Stats_LAND_VARIANT_NONE
}

func (m *Flower_Stats) GetIdleAnimation() Flower_Stats_IdleAnimation {
	if m != nil {
		return m.IdleAnimation
	}
	return Flower_Stats_IDLE
}

func (m *Flower_Stats) GetParticleAlgorithm() Flower_Stats_ParticleAlgorithm {
	if m != nil {
		return m.ParticleAlgorithm
	}
	return Flower_Stats_PARTICLE_NONE
}

func (m *Flower_Stats) GetSmellPrimary() Flower_Stats_Smell {
	if m != nil {
		return m.SmellPrimary
	}
	return Flower_Stats_CITRUS
}

func (m *Flower_Stats) GetSmellSecondary() Flower_Stats_Smell {
	if m != nil {
		return m.SmellSecondary
	}
	return Flower_Stats_CITRUS
}

func init() {
	proto.RegisterEnum("protobuf.Flower_Version", Flower_Version_name, Flower_Version_value)
	proto.RegisterEnum("protobuf.Flower_Stats_SkeletonType", Flower_Stats_SkeletonType_name, Flower_Stats_SkeletonType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_BaseNugType", Flower_Stats_BaseNugType_name, Flower_Stats_BaseNugType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_PowderType", Flower_Stats_PowderType_name, Flower_Stats_PowderType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_StemType", Flower_Stats_StemType_name, Flower_Stats_StemType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_MainLeafType", Flower_Stats_MainLeafType_name, Flower_Stats_MainLeafType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_NugLeafType", Flower_Stats_NugLeafType_name, Flower_Stats_NugLeafType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_BodyType", Flower_Stats_BodyType_name, Flower_Stats_BodyType_value)
	proto.RegisterEnum("protobuf.Flower_Stats_Set", Flower_Stats_Set_name, Flower_Stats_Set_value)
	proto.RegisterEnum("protobuf.Flower_Stats_LandAffinity", Flower_Stats_LandAffinity_name, Flower_Stats_LandAffinity_value)
	proto.RegisterEnum("protobuf.Flower_Stats_LandVariant", Flower_Stats_LandVariant_name, Flower_Stats_LandVariant_value)
	proto.RegisterEnum("protobuf.Flower_Stats_IdleAnimation", Flower_Stats_IdleAnimation_name, Flower_Stats_IdleAnimation_value)
	proto.RegisterEnum("protobuf.Flower_Stats_ParticleAlgorithm", Flower_Stats_ParticleAlgorithm_name, Flower_Stats_ParticleAlgorithm_value)
	proto.RegisterEnum("protobuf.Flower_Stats_Smell", Flower_Stats_Smell_name, Flower_Stats_Smell_value)
	proto.RegisterType((*Flower)(nil), "protobuf.Flower")
	proto.RegisterType((*Flower_Stats)(nil), "protobuf.Flower.Stats")
}

func init() { proto.RegisterFile("protobuf/flower.proto", fileDescriptor_4f4fbad636b19889) }

var fileDescriptor_4f4fbad636b19889 = []byte{
	// 1615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xc9, 0x72, 0xe3, 0xc8,
	0x11, 0x15, 0x57, 0x91, 0xc9, 0x45, 0xa5, 0x9a, 0xc5, 0x70, 0xcf, 0x44, 0x5b, 0x43, 0x4f, 0x87,
	0x75, 0xb0, 0xe5, 0x98, 0x1e, 0xcf, 0x38, 0x7c, 0xf0, 0xa1, 0x48, 0x16, 0x25, 0x58, 0x10, 0xc8,
	0x00, 0x40, 0xb5, 0x7b, 0x0e, 0x46, 0x80, 0x44, 0x89, 0x42, 0x0c, 0x09, 0xd0, 0x00, 0xd4, 0x0a,
	0xcd, 0x17, 0xd8, 0xb7, 0xb1, 0x7d, 0xf4, 0x2f, 0x78, 0x5f, 0xfe, 0xc1, 0xcb, 0x0f, 0x78, 0xff,
	0x0a, 0xef, 0x27, 0x47, 0x56, 0x81, 0x20, 0x38, 0x6d, 0x29, 0xe6, 0xa2, 0xc8, 0x7c, 0xf9, 0xea,
	0x65, 0x56, 0x22, 0x2b, 0x15, 0x84, 0xd7, 0xd6, 0x71, 0x94, 0x46, 0xb3, 0x9b, 0xab, 0x2f, 0x5f,
	0x2d, 0xa3, 0x5b, 0x11, 0x9f, 0x48, 0x9f, 0x36, 0x36, 0x70, 0xef, 0xbb, 0x6f, 0x40, 0x7d, 0x24,
	0x43, 0x94, 0x42, 0x35, 0xf4, 0x56, 0x42, 0x2b, 0x1d, 0x95, 0x8e, 0x9b, 0x96, 0xb4, 0xe9, 0x53,
	0xd8, 0x7f, 0x21, 0xe2, 0x24, 0x88, 0x42, 0xad, 0x7c, 0x54, 0x3a, 0xee, 0x3e, 0xd5, 0x4e, 0x36,
	0x47, 0x4f, 0xd4, 0xb1, 0x93, 0x4b, 0x15, 0xb7, 0x36, 0x44, 0xfa, 0x04, 0xba, 0xbe, 0x48, 0xe6,
	0x71, 0xb0, 0x4e, 0x83, 0x28, 0x74, 0x03, 0x5f, 0xab, 0x1c, 0x95, 0x8e, 0x2b, 0x56, 0xa7, 0x80,
	0xea, 0x3e, 0x7d, 0x03, 0x9a, 0x37, 0x61, 0xf0, 0xed, 0x1b, 0x81, 0x8c, 0xaa, 0x64, 0x34, 0x14,
	0xa0, 0xfb, 0xf4, 0x31, 0xb4, 0x92, 0x34, 0x8a, 0x85, 0xeb, 0xcf, 0x30, 0x5c, 0x93, 0xe1, 0xa6,
	0x84, 0x86, 0x33, 0xdd, 0xa7, 0x3d, 0xe8, 0xac, 0xbd, 0x58, 0x84, 0xa9, 0x1b, 0x85, 0x52, 0xa0,
	0x2e, 0x19, 0x2d, 0x05, 0x8e, 0x43, 0xb1, 0xc3, 0x49, 0x6f, 0x23, 0xe4, 0xec, 0x17, 0x39, 0xce,
	0x6d, 0xa4, 0xfb, 0xf4, 0x04, 0x5e, 0x99, 0xc7, 0xc2, 0x4b, 0x85, 0xef, 0x7a, 0x57, 0xa9, 0x88,
	0xdd, 0xd9, 0x32, 0x9a, 0x7f, 0xa8, 0x35, 0x24, 0xf3, 0x30, 0x0b, 0x31, 0x8c, 0xf4, 0x31, 0x40,
	0xbf, 0x08, 0xb5, 0x24, 0xf5, 0xd2, 0x44, 0x3b, 0x38, 0x2a, 0x1d, 0xb7, 0x9e, 0xbe, 0xfe, 0x52,
	0x37, 0x6c, 0x8c, 0x5a, 0x8a, 0xf4, 0xe8, 0x63, 0x0d, 0x6a, 0x12, 0xa0, 0x8f, 0x01, 0x56, 0x37,
	0xa9, 0x37, 0x0b, 0x96, 0x41, 0x7a, 0xa7, 0xf9, 0x47, 0xa5, 0xe3, 0x9a, 0x55, 0x40, 0xe8, 0x5b,
	0xd0, 0x5e, 0xc4, 0xd1, 0x6d, 0x7a, 0xed, 0x26, 0x6b, 0x21, 0x7c, 0x4d, 0x48, 0x46, 0x4b, 0x61,
	0x36, 0x42, 0x48, 0xb9, 0xf6, 0xe2, 0x17, 0x22, 0x49, 0xdd, 0x24, 0xf8, 0x48, 0x68, 0x57, 0x8a,
	0x92, 0x61, 0x76, 0xf0, 0x91, 0xc0, 0xce, 0xe7, 0x94, 0x75, 0x2c, 0x3c, 0x5f, 0x5b, 0x48, 0x52,
	0x67, 0x43, 0x92, 0x20, 0x7d, 0x13, 0x9a, 0x89, 0x10, 0xbe, 0xeb, 0xc7, 0xd1, 0x5a, 0xfb, 0x4d,
	0x49, 0x52, 0x1a, 0x88, 0x0c, 0xe3, 0x68, 0x8d, 0xa5, 0xce, 0x44, 0x1c, 0xdf, 0xa9, 0xf0, 0x6f,
	0x55, 0xb8, 0x29, 0x21, 0x19, 0x3f, 0x82, 0x96, 0x9a, 0x25, 0x45, 0xf8, 0x9d, 0x22, 0x80, 0xc2,
	0x24, 0xe3, 0x11, 0x34, 0xc2, 0x9b, 0x85, 0x0a, 0xff, 0x5e, 0x85, 0xf7, 0xc3, 0x9b, 0x85, 0x8c,
	0x7d, 0x06, 0xea, 0xd7, 0x22, 0x58, 0x5c, 0xa7, 0xda, 0x8f, 0xca, 0x32, 0x92, 0xb9, 0xf4, 0x10,
	0x2a, 0xe9, 0xf5, 0x5c, 0xfb, 0xb1, 0x42, 0xd1, 0x46, 0x68, 0x3e, 0xf3, 0xb5, 0x9f, 0x64, 0xd0,
	0x7c, 0xe6, 0xd3, 0xf7, 0xe0, 0xf5, 0x64, 0x25, 0x96, 0x4b, 0x77, 0x1d, 0x07, 0x2b, 0x2f, 0xbe,
	0x73, 0x93, 0x34, 0x16, 0xe1, 0x22, 0xbd, 0xd6, 0x7e, 0xaa, 0x58, 0xaf, 0xca, 0xf0, 0x44, 0x45,
	0xed, 0x2c, 0x48, 0xbf, 0x06, 0x9a, 0x3a, 0x96, 0x88, 0x79, 0x14, 0xfa, 0x3b, 0x07, 0x7f, 0xa6,
	0x0e, 0x2a, 0x5d, 0x7b, 0x13, 0xcf, 0x8f, 0x3e, 0x81, 0xee, 0xcc, 0x4b, 0x84, 0x8b, 0x37, 0x4a,
	0xe6, 0xde, 0x52, 0x68, 0x3f, 0x57, 0x07, 0xda, 0x08, 0x9b, 0x37, 0x0b, 0x1b, 0x41, 0xfa, 0x05,
	0x38, 0x58, 0x79, 0x41, 0xe8, 0x2e, 0x85, 0x77, 0x95, 0xf1, 0x7e, 0xa1, 0x78, 0x1d, 0xc4, 0x0d,
	0xe1, 0x5d, 0x29, 0xe2, 0x13, 0xe8, 0xa2, 0x54, 0x81, 0xf7, 0xcb, 0x4c, 0x2f, 0xbc, 0x59, 0x6c,
	0x69, 0x8f, 0x01, 0x92, 0x54, 0xac, 0x32, 0xca, 0xaf, 0x14, 0xa5, 0x89, 0x50, 0x2e, 0x93, 0x97,
	0x35, 0x8f, 0x96, 0x51, 0xac, 0x7d, 0x5c, 0x91, 0xef, 0x76, 0x53, 0xd6, 0x00, 0x41, 0x94, 0x91,
	0x99, 0x14, 0xe5, 0x7b, 0x8a, 0xd2, 0x44, 0x28, 0x8f, 0xcb, 0x34, 0x2a, 0xfe, 0xfd, 0x2c, 0x8e,
	0x90, 0x8a, 0xf7, 0xa0, 0xbd, 0x8e, 0x6e, 0x7d, 0x11, 0x67, 0x8c, 0x1f, 0x28, 0x46, 0x4b, 0x81,
	0x8a, 0xa3, 0x43, 0x27, 0xf9, 0x50, 0x2c, 0x45, 0x1a, 0x85, 0x6e, 0x7a, 0xb7, 0x16, 0xda, 0xdf,
	0x2b, 0x72, 0x55, 0x7c, 0xfe, 0xff, 0x3f, 0x8e, 0x13, 0x3b, 0x23, 0x3b, 0x77, 0x6b, 0x61, 0xb5,
	0x93, 0x82, 0x47, 0x4f, 0xa1, 0x93, 0xdf, 0x4a, 0x4a, 0xfd, 0x43, 0x49, 0xf5, 0xee, 0x91, 0xea,
	0xab, 0xbb, 0x4a, 0xa5, 0xd6, 0x6c, 0xeb, 0xd0, 0x01, 0x64, 0x25, 0x2a, 0x99, 0x7f, 0x2a, 0x99,
	0xb7, 0xee, 0x91, 0x99, 0x48, 0xaa, 0x54, 0x81, 0x75, 0x6e, 0xd3, 0xaf, 0x83, 0xec, 0x84, 0x92,
	0xf8, 0x97, 0x92, 0xf8, 0xdc, 0x7d, 0x97, 0x4a, 0xc5, 0x4a, 0x0a, 0x34, 0x92, 0xcc, 0xa2, 0xdf,
	0x80, 0xee, 0x76, 0x24, 0xa4, 0xc6, 0xbf, 0x1f, 0x6e, 0xcc, 0x45, 0x36, 0x28, 0xaa, 0x31, 0xab,
	0x82, 0x87, 0x8d, 0xc9, 0xa7, 0x46, 0x4a, 0xfd, 0xe7, 0xe1, 0xc6, 0x98, 0x6a, 0x96, 0x54, 0x63,
	0xc2, 0xad, 0x83, 0x77, 0x9a, 0x45, 0xfe, 0x9d, 0x12, 0xf9, 0xef, 0xc3, 0x77, 0xea, 0x47, 0xfe,
	0x9d, 0xba, 0xd3, 0x2c, 0xb3, 0xe8, 0x97, 0xa0, 0x92, 0x88, 0x54, 0xfb, 0x43, 0x55, 0x1e, 0x7c,
	0x74, 0x5f, 0x33, 0x44, 0x6a, 0x21, 0x0f, 0x47, 0x63, 0xe9, 0x85, 0xb8, 0x5b, 0xaf, 0x82, 0x10,
	0x37, 0xdf, 0x1f, 0xab, 0x0f, 0x76, 0xc0, 0xf0, 0x42, 0x9f, 0x65, 0x5c, 0xab, 0xbd, 0x2c, 0x78,
	0x74, 0x04, 0xd2, 0x77, 0x5f, 0x78, 0x71, 0xe0, 0x85, 0xa9, 0xf6, 0xa7, 0xea, 0x83, 0x0d, 0x40,
	0xa5, 0x4b, 0x45, 0xb5, 0x5a, 0xcb, 0xad, 0x43, 0x0d, 0xe8, 0x06, 0xfe, 0x52, 0xb8, 0x5e, 0x18,
	0xac, 0x3c, 0xfc, 0x57, 0xa4, 0xfd, 0x59, 0x29, 0xbd, 0x7d, 0x8f, 0x92, 0xee, 0x2f, 0x05, 0xdb,
	0x90, 0xad, 0x4e, 0x50, 0x74, 0xe9, 0x37, 0x81, 0xae, 0xbd, 0x38, 0x0d, 0xe6, 0xa8, 0xb8, 0x5c,
	0x44, 0x71, 0x90, 0x5e, 0xaf, 0xb4, 0xbf, 0x28, 0xc5, 0xe3, 0xfb, 0xc6, 0x2d, 0x3b, 0xc1, 0x36,
	0x07, 0xac, 0xc3, 0xf5, 0x27, 0x21, 0xda, 0x87, 0xce, 0xce, 0xa6, 0xd3, 0xfe, 0xaa, 0x44, 0xdf,
	0xbc, 0xaf, 0xe7, 0x48, 0xb6, 0xda, 0xc5, 0xf5, 0x47, 0x47, 0x70, 0xf0, 0x89, 0xb5, 0xa7, 0xfd,
	0xed, 0xd3, 0xa8, 0x74, 0x77, 0x77, 0x61, 0xef, 0x31, 0xb4, 0x8b, 0x8f, 0x96, 0x76, 0x01, 0x9c,
	0x33, 0x8b, 0x73, 0xd7, 0xe0, 0x6c, 0x44, 0xf6, 0x7a, 0xdf, 0x29, 0x41, 0xab, 0xf0, 0x14, 0x29,
	0x85, 0xae, 0x39, 0x3d, 0x75, 0xfb, 0xcc, 0xe6, 0xf8, 0x47, 0x1f, 0x90, 0x3d, 0xfa, 0x1a, 0x1c,
	0xe6, 0x18, 0x3f, 0x3d, 0x9d, 0x18, 0xcc, 0x74, 0x48, 0x69, 0x87, 0x7a, 0xc6, 0x74, 0xeb, 0x39,
	0x29, 0xd3, 0x43, 0xe8, 0xe4, 0x98, 0x31, 0xbd, 0x98, 0x90, 0x0a, 0x7d, 0x05, 0x0e, 0x72, 0xe8,
	0x82, 0x1b, 0xc6, 0xf8, 0x19, 0xa9, 0xee, 0x9c, 0x1d, 0x9b, 0xfa, 0xd8, 0x24, 0xb5, 0xde, 0x0f,
	0x4b, 0x00, 0xdb, 0xe7, 0x8c, 0x14, 0x59, 0x80, 0x3b, 0x18, 0x9b, 0x23, 0xfd, 0xd4, 0x7d, 0x87,
	0xec, 0xbd, 0x84, 0x3d, 0x25, 0x25, 0xac, 0x6e, 0x53, 0xd4, 0x96, 0x5a, 0x46, 0xaa, 0x2c, 0x6a,
	0x8b, 0x55, 0xb0, 0x3a, 0x2c, 0x6a, 0x0b, 0x55, 0xb1, 0x3a, 0x55, 0xd4, 0x16, 0xac, 0xe1, 0x59,
	0x59, 0xd4, 0x16, 0xab, 0xf7, 0xbe, 0x05, 0x8d, 0xcd, 0xa2, 0xa0, 0x00, 0x75, 0xdb, 0xe1, 0x17,
	0xb2, 0xa4, 0x8d, 0x8d, 0xa5, 0x6c, 0xec, 0x77, 0x49, 0x39, 0xb7, 0xbf, 0x42, 0x2a, 0xb9, 0xfd,
	0x1e, 0xa9, 0xe6, 0xf6, 0xfb, 0xa4, 0x96, 0xdb, 0x5f, 0x25, 0xf5, 0x5e, 0x0a, 0xed, 0xe2, 0x12,
	0xa1, 0x07, 0xd0, 0x52, 0x5d, 0xe4, 0x6c, 0x24, 0x13, 0xed, 0x00, 0x98, 0x6d, 0x07, 0xc0, 0x94,
	0x3b, 0x00, 0xe6, 0xdd, 0x01, 0x30, 0xf9, 0x0e, 0xf0, 0x3e, 0xa9, 0xf5, 0x56, 0xd0, 0x2a, 0xec,
	0x1b, 0x9c, 0x0e, 0xfc, 0x2c, 0x79, 0xce, 0xa2, 0x8f, 0x29, 0x8b, 0x3e, 0x66, 0x2c, 0xfa, 0x98,
	0xb0, 0xe8, 0x63, 0xbe, 0xa2, 0x8f, 0xe9, 0xde, 0x81, 0xc6, 0x66, 0x33, 0xc9, 0xcb, 0x33, 0x47,
	0xbf, 0x64, 0xaa, 0x89, 0xba, 0x39, 0xd4, 0x07, 0x8c, 0x94, 0x68, 0x07, 0x9a, 0xd6, 0x74, 0xc8,
	0x2d, 0x66, 0xe8, 0x36, 0x29, 0xf7, 0x5c, 0xa8, 0xd8, 0x22, 0xa5, 0x0d, 0xa8, 0x9a, 0x63, 0x93,
	0x93, 0x3d, 0xda, 0x82, 0xfd, 0x53, 0x6e, 0x72, 0x5b, 0xb7, 0x55, 0xc7, 0x07, 0xd6, 0xf3, 0x89,
	0x33, 0x26, 0x65, 0xda, 0x86, 0xc6, 0xc0, 0x60, 0xb6, 0xad, 0x0f, 0x6c, 0x52, 0x41, 0x1a, 0x33,
	0x07, 0x3a, 0x37, 0x1d, 0x75, 0xef, 0xd1, 0x78, 0x6a, 0xb9, 0xce, 0x33, 0x6e, 0x3a, 0xcf, 0x49,
	0x8d, 0x36, 0xa1, 0x36, 0xe4, 0x86, 0xc3, 0x48, 0xbd, 0x77, 0x0e, 0xed, 0xe2, 0xee, 0xc2, 0x4c,
	0xf6, 0x58, 0x37, 0xc8, 0x1e, 0x92, 0x6c, 0x07, 0x93, 0x96, 0x24, 0xc8, 0xcc, 0x21, 0x29, 0xa3,
	0x65, 0xb0, 0x4b, 0x46, 0x2a, 0x18, 0x7e, 0xc6, 0x1c, 0x6e, 0x91, 0x2a, 0xdd, 0x87, 0x8a, 0x3e,
	0xe0, 0xa4, 0xd6, 0x7b, 0x1b, 0x5a, 0x85, 0xf5, 0x85, 0xb3, 0x69, 0x30, 0x73, 0xe8, 0x5e, 0x32,
	0x4b, 0xc7, 0xf9, 0x54, 0x57, 0xe8, 0x7d, 0x16, 0x3a, 0x3b, 0xab, 0x09, 0x45, 0xf5, 0xa1, 0x81,
	0xa1, 0x5f, 0x97, 0xe1, 0xf0, 0xa5, 0x25, 0x83, 0x83, 0x3b, 0x61, 0x96, 0xa3, 0x0f, 0x0c, 0x9e,
	0x69, 0x60, 0x6b, 0x27, 0xe3, 0x67, 0x43, 0x6e, 0xb9, 0xe6, 0xf4, 0x54, 0x55, 0x78, 0xc6, 0x8c,
	0xb1, 0xfa, 0x28, 0x67, 0x9c, 0x59, 0x8e, 0x6b, 0x31, 0xdd, 0x24, 0x15, 0x2c, 0xa2, 0x6f, 0x8d,
	0xcf, 0xb9, 0xe9, 0x16, 0xe0, 0x2a, 0x6a, 0x0e, 0x98, 0x69, 0xb2, 0xbe, 0x6e, 0x2b, 0x48, 0xce,
	0xa3, 0xc1, 0x3e, 0xe0, 0x96, 0x4d, 0xea, 0x4a, 0xef, 0x03, 0x4e, 0xf6, 0xd1, 0x1a, 0xe9, 0x16,
	0x27, 0x0d, 0x8c, 0xf7, 0xa7, 0xfd, 0xbe, 0xc1, 0x49, 0x13, 0x5b, 0xaa, 0x9b, 0x03, 0x66, 0x3a,
	0xcc, 0xc1, 0xe7, 0x0b, 0xf8, 0x68, 0x98, 0x31, 0x39, 0x63, 0xee, 0xa6, 0x52, 0xd2, 0xc2, 0x1c,
	0x7d, 0xee, 0x14, 0xa0, 0x36, 0xd2, 0x4e, 0xd9, 0xc5, 0x45, 0x01, 0xeb, 0x20, 0x26, 0xbf, 0xc6,
	0x16, 0xeb, 0x52, 0x0d, 0x5e, 0xcd, 0xcb, 0x2b, 0x26, 0x3a, 0xc0, 0x27, 0x9b, 0x47, 0xb2, 0x72,
	0x49, 0xcf, 0x83, 0x9a, 0x5c, 0x80, 0x72, 0x22, 0x74, 0xc7, 0x9a, 0xda, 0x6a, 0xac, 0x46, 0xc6,
	0xd8, 0x62, 0x06, 0x29, 0xc9, 0x8f, 0x79, 0x3e, 0x35, 0xcf, 0x49, 0x19, 0x4d, 0x6c, 0xc4, 0x99,
	0x7a, 0x99, 0x83, 0x33, 0xce, 0x6d, 0x4e, 0xaa, 0x92, 0x71, 0x31, 0x3e, 0xe7, 0xa4, 0x86, 0x57,
	0x9e, 0xe8, 0x26, 0x27, 0x75, 0x04, 0x47, 0xd6, 0x54, 0x77, 0xc8, 0x7e, 0xef, 0x11, 0xec, 0x67,
	0x3f, 0x98, 0xf0, 0xf2, 0x97, 0xdc, 0xb2, 0x71, 0x45, 0xc8, 0xaf, 0x31, 0xab, 0xcb, 0x9d, 0xfc,
	0xee, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x26, 0x23, 0x83, 0xb5, 0x0d, 0x00, 0x00,
}
